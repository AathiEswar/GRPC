plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.rest-api'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
		runtimeOnly 'com.h2database:h2'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
		runtimeOnly('org.springframework.boot:spring-boot-devtools') {
			because 'Development-time tools for faster development'
		}
		implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl'
		implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'

		implementation 'ch.qos.logback:logback-classic:1.4.11' // Latest stable version as of 2025
		implementation 'org.slf4j:slf4j-api:2.0.9'            // SLF4J API for abstraction

		implementation 'org.projectlombok:lombok:1.18.30' // Latest version as of 2025
		annotationProcessor 'org.projectlombok:lombok:1.18.30' // Required for compile-time annotations
		testAnnotationProcessor 'org.projectlombok:lombok:1.18.30' // Optional: For testing
		testImplementation 'org.projectlombok:lombok:1.18.30' // Optional: For testing
	}

}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register("prepareLogDir") {
	doLast {
		def logDir = file("${buildDir}/logs")
		if (!logDir.exists()) {
			logDir.mkdirs()
		}
	}
}

tasks.named("build").configure {
	dependsOn("prepareLogDir")
}
